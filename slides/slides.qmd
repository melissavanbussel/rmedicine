---
title: "R package development with GitHub Pages and `pkgdown`"
subtitle: "R/Medicine 2025"
author: "Melissa Van Bussel"
institute: "Senior Data Scientist, Statistics Canada"
execute:
  echo: true
  eval: false
  message: false
  warning: false
format:
  revealjs:
    theme: custom.scss
    highlight-style: zenburn
    incremental: false
    keyboard: true
    touch: true
    code-overflow: scroll
    code-line-numbers: true
    code-copy: true
    code-block-height: 500px
    menu: false
    lang: en
    footer: "[ggnot2.site](https://ggnot2.site/index.html)"
    slide-number: c/t
    include-after-body: clean_title_page.html
    include-in-header:
          - text: |
              <link rel="icon" type="image/png" href="logo.png">
---

# Housekeeping and preamble

## Where to access today's materials

* The link in the footer ([ggnot2.site/index.html](https://ggnot2.site/index.html)) contains the `pkgdown` site we will be working towards building together
* You can access the slides at [ggnot2.site/slides.html](https://ggnot2.site/slides.html), which are also embedded on the `pkgdown` site
* You can access the GitHub repo by clicking the GitHub icon in the navbar, or by going to [github.com/melissavanbussel/rmedicine](https://www.github.com/melissavanbussel/rmedicine)

## How to participate

* **Please participate!** This is a 3-hour workshop, which is a long time to stay focused. The more you participate, the more fun it will be for everyone.

## By the end of this workshop, you will have...

* 🌎 Your package available on GitHub for others to install
* 📄 A polished pkgdown website for your package, deployed via GitHub Pages
* 🎨 An understanding of how to customize the trickier components of pkgdown websites

## The final product we will create

<iframe src="https://ggnot2.site/index.html" width="1000" height="450"></iframe>

## Background knowledge

* Participants should have prior experience with Git, but don’t need prior experience with `pkgdown` or GitHub Pages.
* Participants should also have some basic familiarity with the structure of R packages (e.g., the `R/` folder and the `man/` folder).

## Agenda/schedule for today

# Section 0: Pre-workshop setup steps

::: {.footer}

[Click here for the PDF version](https://rconsortium.github.io/RMedicine_website/files/R%20package%20development%20with%20GitHub%20Pages%20and%20pkgdown.pdf)

:::

## Software installations

Please ensure you have all of the following software installed (and updated to the most recent versions):

* [R v4.5.0](https://cran.rstudio.com/)
* [Rtools v4.5](https://cran.r-project.org/bin/windows/Rtools/)
* [RStudio v2025.05.0+496](https://posit.co/download/rstudio-desktop/)
* [Git v2.49.0](https://git-scm.com/downloads)

## Git and GitHub setup

* We will be using GitHub (and GitHub Pages) for this workshop. Please ensure you have a GitHub account that you’re able to log into and access during the workshop.
* Before the workshop, please ensure that Git is configured properly on your machine. 
* In RStudio, you can run the `git_sitrep()` function from the `usethis` package to verify your configuration.

## What you should see from running `git_sitrep()`

* You should see your name and email under the "Git global (user)" section. If not:

```{r}
usethis::use_git_config(
 user.name = "Melissa Van Bussel",
 user.email = "melissalisevb@gmail.com"
)
```

## What you should see from running `git_sitrep()`

* You should see `Vaccinated: TRUE`. If not: 

```{r}
usethis::git_vaccinate()
```

## What you should see from running `git_sitrep()`

* You should see the username and email associated with your GitHub account, and you should see the word "discovered" beside the line that says "Personal access token". If not:

```{r}
usethis::create_github_token()
gitcreds::gitcreds_set()
```

# Section 1: Basic package creation

## Creating a new project

* Make sure the `devtools` package is installed
* `File > New project > R package using devtools`
* Name of the package: `rmedicine`

```{r}
library(devtools)
library(pkgdown)
```

## The `DESCRIPTION` file

Run 

```{r}
use_mit_license()
```

then update the `Authors@R` field and change the version number to something a little less long.

## Creating a `README.md` file

```{r}
use_readme_md()
```

## Making our first R function

:::: {.columns}

::: {.column width="40%"}

```{r}
use_r("print_hello_world")
```

:::

::: {.column width="5%"}

:::

::: {.column width="55%"}

```{r}
#' Print hello world
#'
#' This function just prints hello world.
#'
#' @param x This argument does nothing.
#'  If it did do something, it might require more words to explain.
#'
#' @return Prints `"Hello, world!"` to the console
#'
#' @examples
#' print_hello_world(x = 1)
#'
#' @export
print_hello_world <- function(x) {
  print("Hello, world!")
}
```

:::

::::

## Let's add a second function

:::: {.columns}

::: {.column width="40%"}

```{r}
use_r("print_hello_rmedicine")
```

:::

::: {.column width="5%"}

:::

::: {.column width="55%"}

```{r}
#' Print hello R/Medicine
#'
#' This function just prints hello R/Medicine.
#'
#' @param x This argument does nothing.
#'  If it did do something, it might require more words to explain.
#'
#' @return Prints `"Hello, R/Medicine"` to the console
#'
#' @examples
#' print_hello_rmedicine(x = 1)
#'
#' @export
print_hello_rmedicine <- function(x) {
  print("Hello, R/Medicine!")
}
```

:::

::::

## We should probably add some tests, too

:::: {.columns}

::: {.column width="40%"}

```{r}
# install.packages("testthat")
library(testthat)
use_test("print_hello_world")
```

:::

::: {.column width="5%"}

:::

::: {.column width="55%"}

```{r}
test_that("print_hello_world prints hello world", {
  expect_equal(
    print_hello_world(x = "test"),
    "Hello, world!"
  )
})
```

:::

::::

## Repeat for the `print_hello_rmedicine` function

:::: {.columns}

::: {.column width="40%"}

```{r}
# install.packages("testthat")
library(testthat)
use_test("print_hello_rmedicine")
```

:::

::: {.column width="5%"}

:::

::: {.column width="55%"}

```{r}
test_that("print_hello_rmedicine prints hello rmedicine", {
  expect_equal(
    print_hello_rmedicine(x = "test"),
    "Hello, R/Medicine!"
  )
})
```

:::

::::

# Section 2: Getting things up onto GitHub Pages

## Always run `check()` before pushing to GitHub

We should see no errors, warnings, or notes!

```{r}
check()
```

## Initialize the git repository

This will create the `.git` folder, and populate the `.gitignore` file.

```{r}
use_git()
```

## Creating the repository on GitHub

The `usethis` package makes this step very simple for us! 

```{r}
use_github()
```

## Publishing the `pkgdown` site using GitHub Pages

Again, the `usethis` package makes this very easy to do! 

```{r}
use_pkgdown_github_pages()
```

## Making changes from here

* Whenever we push to the `main` branch, our website will be automatically updated for us!
* **Remember:** always `pull` before you `push`

To preview changes locally:

```{r}
build_site()
```

# Section 3: Let's make things a little prettier

## Creating a package logo

:::: {.columns}

::: {.column width="25%"}

![](logo.png)

:::

::: {.column width="75%"}

* If you don't already have a logo, the [hexmake](https://connect.thinkr.fr/hexmake/) Shiny app or the [hexSticker](https://github.com/GuangchuangYu/hexSticker) package are good choices
* For today, you can use the image on the left, if you want! 

:::

::::

## Adding the logo to your package

You can run the `use_logo` function, which will automatically place the file in the right location within your package.

```{r}
use_logo("your/path/here.png")
```

## Creating favicons

Without loading the `pkgdown` package, run

```{r}
pkgdown::build_favicons()
```

## Adding a bootswatch theme

In the `_pkgdown.yaml` file, add a [bootswatch theme](https://bootswatch.com/):

```{r}
#| code-line-numbers: "5"
url: https://melissavanbussel.github.io/rmedicine/
template:
  bootstrap: 5
  bslib:
    bootswatch: zephyr
```

:::{.callout-tip}

## Tip

There are a couple of bootswatch themes that are so new, they haven't been implemented in Quarto. Most of them should work, though!

:::

## Customizing appearance using `bslib` variables

* Consult [this page](https://rstudio.github.io/bslib/articles/bs5-variables/index.html) to see a full list of options that you can change
* To change the "primary colour" of your theme, for example:

```{r}
#| code-line-numbers: "6"
url: https://melissavanbussel.github.io/rmedicine/
template:
  bootstrap: 5
  bslib:
    bootswatch: zephyr
    primary: "#c70000"
```

## Changing the font using `bslib`

* There are a few ways you can change the fonts, but using [Google fonts]() with `bslib` is the easiest!

```{r}
#| code-line-numbers: "7,8"
url: https://melissavanbussel.github.io/rmedicine/
template:
  bootstrap: 5
  bslib:
    bootswatch: zephyr
    primary: "#c70000"
    base_font: {google: "Outfit"}
    code_font: {google: "Fira Code"}
```

## Adding a custom.scss file

* If you want to customize things further, create a file called `extra.scss` in the `pkgdown` folder
* It will automatically be copied to the correct location by GitHub Actions

```
└── 📁 rmedicine/
    └── 📁 pkgdown/
        └── 📄 extra.scss
```        

## Right clicking and inspecting

Let's change the colour of the search bar! 

* In Google Chrome: `Right click > Inspect`
* The class is called `.form-control`

```css
.form-control {
  background-color: #f4cccc;
}
```

## Adding a lightswitch

* We can enable a **dark mode** by setting `light-switch` to `true` in our `_pkgdown.yml` file:

```{r}
#| code-line-numbers: "9"
url: https://melissavanbussel.github.io/rmedicine/
template:
  bootstrap: 5
  bslib:
    bootswatch: zephyr
    primary: "#c70000"
    base_font: {google: "Outfit"}
    code_font: {google: "Fira Code"}
  light-switch: true
```

## ...but what if we want different styles for light mode and dark mode?

In our `extra.scss` file:

```css
[data-bs-theme="light"] .form-control {
  background-color: #f4cccc;
}

[data-bs-theme="dark"] .form-control {
  background-color: #40292C;
}
```

## Syntax highlighting theme

We can set a syntax highlighting theme for **light mode** and **dark mode**.

```{r}
#| code-line-numbers: "10,11"
url: https://melissavanbussel.github.io/rmedicine/
template:
  bootstrap: 5
  bslib:
    bootswatch: zephyr
    primary: "#c70000"
    base_font: {google: "Outfit"}
    code_font: {google: "Fira Code"}
  light-switch: true
  theme: atom-one-light
  theme-dark: atom-one-dark
```

# BREAK

# Section 4: Customizing our content

## The default "reference" page

* The "Reference" page is the page that lists all of the functions (and datasets) that are part of your package
* By default, it puts the functions in **alphabetical order**
* We can change that, though! Take a look at the [`pkgdown` documentation](https://pkgdown.r-lib.org/reference/index.html) for an example.

## Reordering the contents of the reference page

In the `_pkgdown.yml` file:

* Create sections using `title`
* Create descriptions using `desc`
* List the pages using `contents`

```yaml
reference:
  - title: Functions that print things
    desc: These functions will all print things to your console.
    contents:
      - print_hello_world
      - print_hello_rmedicine
```

## Shortcut: "Topic matching"

You can use ["topic matching"](https://pkgdown.r-lib.org/reference/build_reference.html#topic-matching) as a shortcut:

```{r}
#| code-line-numbers: "5"
reference:
  - title: Functions that print things
    desc: These functions will all print things to your console.
    contents:
      - starts_with("print_")
```

## Getting fancier with the reference page

You can also use emojis, and create subsections!

```yaml
reference:
  - title: ":pencil: Functions that print things"
    desc: These functions will all print things to your console.
  - subtitle: ":one: First subsection"
    contents:
      - print_hello_world
  - subtitle: ":two: Second subsection"
    contents:
      - print_hello_rmedicine
```

## Customizing navbar contents

* There are some built-in options for the navbar, such as `search`, `github` and `lightswitch`

```
navbar:
  structure:
    right: [search, github, lightswitch]
```

## Components 

* You can create custom buttons in the navbar using **components**
* Use [fontawesome icons](https://fontawesome.com/search?ic=free) to customize the button appearance

```{r}
#| code-line-numbers: "3-8"
navbar:
  structure:
    right: [search, github, my_linkedin, lightswitch]
  components:
    my_linkedin:
      icon: fa-linkedin
      href: https://www.linkedin.com/in/melissavanbussel/
      aria-label: LinkedIn
```

## Customizing footer contents

* The footer works **very** similarly to the navbar
* It's markdown, so you can include almost anything you want!

```yaml
footer:
  structure:
    left: developed_by
    right: built_with_pkgdown
  components:
    developed_by: "Developed by [Melissa Van Bussel](https://melissavanbussel.com/) :computer: for the [R/Medicine 2025 Conference](https://rconsortium.github.io/RMedicine_website/)."
    built_with_pkgdown: "This site was built using [pkgdown](https://pkgdown.r-lib.org/)!&nbsp;&nbsp;<img src='https://pkgdown.r-lib.org/logo.png' alt='pkgdown logo' width='25'>"
```

## Adding JavaScript

* Earlier, we saw the `extra.scss` file
* `pkgdown` also automatically recognizes the `pkgdown/extra.js` file

```
└── 📁 rmedicine/
    └── 📁 pkgdown/
        └── 📄 extra.scss
        └── 📄 extra.js
```   

## Let's see it in action

* We'll add an additional component to our navbar called `#js_alert#`
* When the button is clicked, a pop-up message will appear

:::: {.columns}

::: {.column width="50%"}

```{r}
#| code-line-numbers: "9-12"
navbar:
  structure:
    right: [search, github, my_linkedin, lightswitch]
  components:
    my_linkedin:
      icon: fa-linkedin
      href: https://www.linkedin.com/in/melissavanbussel/
      aria-label: LinkedIn
   js_alert:
      icon: fa-code
      href: "#js_alert#"
      aria-label: JavaScript
```

:::

::: {.column width="50%"}

```js
document.addEventListener("DOMContentLoaded", function() {
  let javascriptAlert = document.querySelectorAll(".nav-link[href*='#js_alert#']");
  javascriptAlert.forEach(function (jsAlert) {
    jsAlert.addEventListener("click", function(event) {
      event.preventDefault();
      alert("JavaScript is working!");
    });
  });
});
```

:::

::::

## Can you add more files?

Yes! You can insert [additional HTML etc.](https://pkgdown.r-lib.org/articles/customise.html#additional-html-and-files)

For example, we can add additional javascript using `after_body` in the `_pkgdown.yml` file:

```yaml
template:
  includes:
    after_body: |
      <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
      <script>
        document.addEventListener("DOMContentLoaded", function () {
          document.addEventListener("click", function (e) {
            if (typeof confetti === "function") {
              const x = e.clientX / window.innerWidth;
              const y = e.clientY / window.innerHeight;

              confetti({
                origin: { x: x, y: y }
              });
            }
          });
        });
      </script>
```

# BREAK

# Section 5: Stuff that requires a deeper understanding of GitHub Pages

## ~ELI5~ ELI15: How does GitHub Pages actually work*?

(* = in our current, very specific scenario)

* When you push to `main`, the terminal commands in the `.github/workflows/pkgdown.yaml` file are run on a virtual machine
* This file defines the **"workflow"** (pipeline)
* The commands tell GitHub to:
  * Install stuff: R, pandoc, our R packages...
  * Build the site (`pkgdown::build_site_github_pages()`)
  * Place the resulting HTML files in the correct place (`/docs`) 😊

## ...Why do I need to know this?

* The `pkgdown` and `usethis` packages take care of the hard work for us by **writing this file for us**
* If we want to do more complicated things, though, we need to be able to **read, understand, and modify this file.**

## GitHub Actions

* If you plan on re-running the same terminal commands in many different workflows/pipelines/projects, you probably don't want to retype them out all the time
* **Example:** You'll probably always want to install R for every R project
* You can create a **GitHub Action** and run a series of terminal commands with just 2 lines, instead of many (e.g., 50+)!
* Other people can use your Actions, too! 🤝

## Example: Install Quarto action

It's pretty complicated:

<iframe src="https://github.com/quarto-dev/quarto-actions/blob/main/setup/action.yml" width="800" height="450"></iframe>

## GitHub Actions in the `.github/workflows/pkgdown.yaml` file

...The Quarto installation is just one small part of *this* action

```yaml
      - uses: r-lib/actions/setup-r-dependencies@v2
```

## What's my point?

* **Point 1:** It's complicated, and it's great that most of the hard work is done for us.
* **Point 2:** It's ultimately just terminal commands, though. You can probably do 99% of what you want to do with just a few commands.

## What are those commands?

**Remember:** GitHub Pages will host any page that ends up in our `/docs` folder.

The most important commands for R users are:

  * `mkdir folder_name`: Make a new folder called `folder_name`
  * `cd folder_name`: Change current directory to `folder_name` (use `cd ../` to go up a folder level)
  * `cp old_folder/file_name new_folder/file_name`: Copy the `file_name` from the `old_folder` to the `new_folder`
  * `Rscript -e`: Execute a line of R code
  * `quarto render proj_name --output-dir="docs"`: Render your Quarto file into the `docs` folder

## Let's see an example!

We're going to change the `link.svg` image

::::{.columns}

::: {.column width="50%"}

![](https://pkgdown.r-lib.org/link.svg)

:::

::: {.column width="50%"}

![](link.svg)

:::

::::

## How do we change it?

* The file being used is located at `docs/link.svg`
* The `docs` folder is in our `.gitignore`, though, so just changing the file will only work locally
* **If we want it to work on GitHub Pages:** In our "workflow" file, we have to make a copy of this file!

## Modifying the `.github/workflows/pkgdown.yaml` file

We need to add this *after* the `pkgdown::build_site_github_pages()` function is called.

```
      - name: Override link.svg image with custom_link.svg image
        run: cp docs/custom_link.svg docs/link.svg
```

## Vote: Which topic do you want to cover?

* Quarto vignettes
* Logo image in the navbar
* Adding a dynamic test coverage badge
* Custom domain for your GitHub Pages

## Adding a Quarto vignette

```{r}
use_vignette(name = "tutorial.qmd", title = "Tutorial Title")
```

* `Build > Install > Clean and install`
* Ensure Quarto is installed (including the `quarto` package in R)

## Troubleshooting Quarto vignettes

* If you use any packages that are not in your `DESCRIPTION` file, you must add it as a dependency in `.github/workflows/pkgdown.yaml`.

```{r}
#| code-line-numbers: "3"
     - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::pkgdown, local::., reticulate
          needs: website
```

:::{.callout-tip}

## Tip

If there is an error in your Quarto file (i.e., it does not render), the error message will only say `system command 'quarto' not found`. Quarto is probably installed, and you probably have a syntax error in your Quarto vignette.

:::

## Changing your navbar structure to account for your documentation

You can type `Alt+0160` to add a blank character (`&nbsp;` will not work).

```yaml
navbar:
  structure:
    left: [vignettes, rd_files]
    right: [search, github, my_linkedin, js_alert, lightswitch]
  components:
    vignettes:
      text: " Vignettes"
      icon: fa-book
      menu:
        - text: Examples
        - text: "  Tutorial Title"
          href: articles/my_vignette.html
    rd_files:
      text: " Function Documentation"
      icon: fa-file
      menu:
        - text: All functions
          href: reference/index.html
        - text: "  Print things"
        - text: "    Print Hello World"
          href: reference/print_hello_world.html
        - text: "    Print Hello R/Medicine"
          href: reference/print_hello_rmedicine.html
```

## Adding a logo in your navbar

:::: {.columns}

::: {.column width="50%"}

In the `pkgdown/extra.js` file (replace with your package name, URL, and folder depth):

```js
document.addEventListener("DOMContentLoaded", function () {
  const brand = document.querySelector(".navbar-brand");
  if (!brand) return;

  // Use different offset based on environment
  const offset = window.location.protocol === "file:" ? 7 : 1;

  const pathParts = window.location.pathname.replace(/^\/+/, '').split('/');
  const depth = Math.max(0, pathParts.length - offset);
  const prefix = '../'.repeat(depth);

  const imgSrc = `${prefix}logo.png`;

  brand.innerHTML = `
    <img src="${imgSrc}" height="30" style="vertical-align: middle; margin-right: 10px;"">
    <span style="vertical-align: middle;">rmedicine</span>
  `;
});

```

:::

::: {.column width="50%"}

In the `pkgdown/extra.scss` file (to add a hover effect):

```
.navbar-brand:hover {
  color: var(--bs-secondary-color);
}
```

:::

::::

## Customizing the sidebar

You can add or remove any of the [default components](https://pkgdown.r-lib.org/reference/build_home.html?q=sidebar#sidebar):

```yaml
home:
  sidebar:
    structure: [links, authors]
```

## Customizing author appearance

You can customize the information for each author, including by adding arbitrary HTML:

```yaml
authors:
  Melissa Van Bussel:
    href: https://melissavanbussel.com/
    html: "<img src='https://images.squarespace-cdn.com/content/v1/615e5d6733744f26a45a0916/0005b0b1-e327-4965-89c0-3c38a167ac35/Melissa_VanBussel_2025.jpg?format=2500w' width=100 alt=''><br><span style=''>Melissa Van Bussel</span>"
```

## Creating custom sections in your sidebar

```{r}
#| code-line-numbers: "3,4,5,6"
home:
  sidebar:
    structure: [badges, links, authors]
    components:
      badges:
        title: Package badges
        text: |
          Placeholder text
```

## "Simple" badges

Examples where shields.io will do the work for you:

* Package version on GitHub: [https://shields.io/badges/git-hub-r-package-version](https://shields.io/badges/git-hub-r-package-version)
* Workflow/pipeline status: [https://shields.io/badges/git-hub-actions-workflow-status](https://shields.io/badges/git-hub-actions-workflow-status)

```yaml
        text: |
          ![](https://img.shields.io/github/r-package/v/melissavanbussel/rmedicine?label=rmedicine)<br>
          ![](https://img.shields.io/github/actions/workflow/status/melissavanbussel/rmedicine/pkgdown.yaml)<br>
```

## Badges that require modifying your workflow file

* You can create dynamic badges that contain anything you can think of
* If you use shields.io, you can pull any field from a `.json` or `.yaml` file
* We can modify the workflow to run arbitrary code, then save the results into a `.json` file or `.yaml` file
* As long as we output the file to the `docs` folder, shields.io will be able to access it!

## Code coverage badge

Let's add a test coverage badge: ![](https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fmelissavanbussel.github.io%2Frmedicine%2Fcoverage.json&query=%24.coverage&label=test%20coverage)

We need to:

* Use `covr` to check our package coverage 
* Output the results to a `.json` file in the `docs` folder
* Create the badge using shields.io

## Calculating the code coverage

In the `_pkgdown.yml` file:

```yaml
      - name: Add test coverage badge
        run: Rscript -e "jsonlite::write_json(list(coverage = sprintf('%.1f%%', covr::percent_coverage(covr::package_coverage()))), 'docs/coverage.json', auto_unbox = TRUE)"
```

We now need to add the `jsonlite`, `testthat`, and `covr` packages to our workflow's package installations.

In the `.github/workflows/pkgdown.yaml` file:

```{r}
#| code-line-numbers: "3"
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::pkgdown, local::., reticulate, jsonlite, testthat, covr
```

## Creating the badge

* Generate the badge here: [https://shields.io/badges/dynamic-json-badge](https://shields.io/badges/dynamic-json-badge)
* My YouTube video has more details if you need!

<iframe width="560" height="315" src="https://www.youtube.com/embed/fRILXeWTJYY?si=WoX2sl9aIvrVsJg9" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

## Adding the badge to the sidebar

```{r}
#| code-line-numbers: "10"
home:
  sidebar:
    structure: [badges, links, authors]
    components:
      badges:
        title: Package badges
        text: |
          ![](https://img.shields.io/github/r-package/v/melissavanbussel/rmedicine?label=rmedicine)<br>
          ![](https://img.shields.io/github/actions/workflow/status/melissavanbussel/rmedicine/pkgdown.yaml)<br>
          ![](https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fmelissavanbussel.github.io%2Frmedicine%2Fcoverage.json&query=%24.coverage&label=test%20coverage)<br>
```

# BREAK

# Section 6: Extra fancy stuff

## Using a custom domain for GitHub Pages

* By default, your website will end with `.github.io`
* You can purchase a custom domain from any provider (you do not need to purchase hosting services)
* For this workshop, I purchased `ggnot2.site` for a year for $\approx$ $2 CAD from `[domain.com](https://www.domain.com/)

## Telling your domain to point to your GitHub Pages

From your domain provider's DNS settings (full details [here](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain)):

* Remove any default `A` records
* Add the following 4 IP addresses as `A` records (use `@` rather than `www`)

```
185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
```

* Add a `CNAME` record (use `www` rather than `@`) and point it to your GitHub Pages URL

```
melissavanbussel.github.io/rmedicine
```

:::{.callout-tip}

## Tip

If your custom domain has a different depth than your GitHub Pages URL, you may need to adjust some file paths.

:::

## Telling GitHub Pages that you have the rights to do this 😊

* From your GitHub project: `Settings > Pages > Custom domain` and enter the domain **without** `www` or `https://` in front of it (e.g., `ggnot2.site`)
* Check the "Enforce HTTPS" checkbox
* It will take 15 minutes to 48 hours for it to work

## Including Quarto files inside of your `pkgdown` site

* The slides for this workshop are actually rendered as part of my package's workflow! 
* They are included in the `slides/` folder of my package.
* I don't necessarily *recommend* this approach, but it does demonstrate how creative you can get with GitHub workflows.

## How to include a Quarto file inside of your `pkgdown` site

* Create a `slides` folder, then a `slides.qmd` file in this folder
* Add `^slides$` to your `.Rbuildignore`
* Add a `quarto render` command to your `.github/workflows/pkgdown.yaml` file, and output the files to the `docs` folder

```yaml
      - name: Render the quarto slides
        run: quarto render slides/slides.qmd --output-dir="../docs"
```

# Feedback form

## Thank you!

Any questions?

<br>

<img src="https://upload.wikimedia.org/wikipedia/commons/8/81/LinkedIn_icon.svg" style="width:50px; vertical-align: middle;"> [melissavanbussel.com](https://www.melissavanbussel.com)

🌐 [@melissavanbussel](https://www.linkedin.com/in/melissavanbussel/)

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Octicons-mark-github.svg/1200px-Octicons-mark-github.svg.png" style="width:50px; vertical-align: middle;"> [@melissavanbussel](https://www.github.com/melissavanbussel)

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_%282017%29.svg/768px-YouTube_full-color_icon_%282017%29.svg.png?20240107144800" style="width:50px; vertical-align: middle;"> [@ggnot2](https://www.youtube.com/c/ggnot2)
